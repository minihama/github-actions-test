name: Create tag and release

on:
    push:
        branches: [ "main" ]
 
jobs:
    pre-version:   # 잡의 순차 실행을 위한 키 이름 
        # `if` 조건: 워크플로우를 트리거한 액터(actor)가 'github-actions[bot]'이 아닐 경우에만 이 job을 실행합니다.
        if: github.actor != 'github-actions[bot]'
        runs-on: ubuntu-latest
        outputs:
            pre-version: ${{ steps.version.outputs.version }} # VERSION 파일에서 현재 버전 추출
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0  # 태그를 가져오기 위해 필요
            - name: Load Version from File
              id: version  # 이 ID를 사용하여 출력 값을 참조합니다.
              uses: actions/github-script@v7  # 최신 버전으로 업데이트
              with:
                script: |
                  const fs = require('fs');
                  const versionFile = './VERSION';  // 버전 파일 경로
                  const version = fs.readFileSync(versionFile, 'utf8').trim();
                  core.setOutput('version', version);  
            
    check-pre-version:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["pre-version"]
        steps:
            - name: check loaded version
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version from pre-version job is: ${{ needs.pre-version.outputs.pre-version }}"        

    check-commit:   # 잡의 순차 실행을 위한 키 이름 
        runs-on: ubuntu-latest
        needs: ["pre-version"]
        if: ${{ needs.pre-version.outputs.pre-version != '' }}
        outputs:
            commit-message: ${{ steps.check.outputs.commit-message }}   # 출력 ID: 잡 수준(check-commit.result)의 출력값
            version: ${{ steps.get-version.outputs.version }}
        steps:
            - uses: actions/checkout@v3
            - name: Check commit message
              id: check      # 스텝 ID
              # 커밋 메시지 내용이 head_commit.message에 기입 된다.
              # 스텝 수준(check.result)의 출력값
              #run: echo "result=$(echo '${{ github.event.head_commit.message }}' | grep -oP '^Update version to v(\d|\.)+$')" >> $GITHUB_OUTPUT
              run: echo "commit-message=$(echo '${{ github.event.head_commit.message }}')" >> $GITHUB_OUTPUT
              shell: bash
            - name: Get version
              id: get-version
              #run: echo "version=$(echo '${{ github.event.head_commit.message }}' | grep -oP 'v(\d|\.)+')" >> $GITHUB_OUTPUT
              run: echo "version=$(echo '${{ needs.pre-version.outputs.pre-version }}')" >> $GITHUB_OUTPUT
              shell: bash
    check-commit-message:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["check-commit"]
        steps: 
            - name: check loaded commit message
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The commit-message from commit-message job is: ${{ needs.check-commit.outputs.commit-message }}"        
            - name: check loaded version
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version from pre-version job is: ${{ needs.check-commit.outputs.version }}"        

    create-log-new-version:
        runs-on: ubuntu-latest
        needs: ["check-commit"]
        if: ${{ needs.check-commit.outputs.version != '' }}
        outputs:
            new-version: ${{ steps.update-version.outputs.new-version}}
            release-body: ${{ steps.generate-body.outputs.body }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Generate body
              id: generate-body
              run: |
                  EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
                  git_logs=$(git log "$(git describe --tags --abbrev=0)"..HEAD --oneline)
                  git_logs="${git_logs//$'\n'/$'\n'- }"
                  {
                      echo "body<<$EOF"
                      echo "- $git_logs"
                      echo "$EOF"
                  } >>"$GITHUB_OUTPUT"
              shell: bash
            - name: version update
              id: update-version
              run: |   # 버전에서 3번째 필드의 값을 1 증가 시킴, 첫번재 2번재는 관여 안함
                  echo "new-version=$(echo ${{ needs.check-commit.outputs.version }} | awk -F. '{OFS="."; $3++; print}' )"  >> $GITHUB_OUTPUT
              shell: bash
    check-create-log-new-version:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["create-log-new-version"]
        steps: 
            - name: check generate-body message
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The message from generate-body job is: ${{ needs.create-log-new-version.outputs.release-body }}"        
            - name: check version update
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version update from new version job is: ${{ needs.create-log-new-version.outputs.new-version }}"        
    create-tag-update-version:
        runs-on: ubuntu-latest
        needs: ["create-log-new-version"]
        if: ${{ needs.create-log-new-version.outputs.new-version != '' }}
        permissions:
            contents: write # 릴리즈를 생성하려면 쓰기 권한이 필요합니다.
        outputs:
            tag-exists: ${{ steps.create-tag.outputs.tag_exists }}
            update-version: ${{ steps.update-version-file.outputs.update-version }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0        
            - uses: rickstaa/action-create-tag@v1
              id: create-tag
              with:
                  tag: ${{ needs.create-log-new-version.outputs.new-version }}
                  tag_exists_error: true
                  message: ${{ needs.create-log-new-version.outputs.release-body }}
            - name: update version file
              id: update-version-file
              # 이전 스텝에서 생성된 새 버전 값을 VERSION 파일에 씁니다. 
              # 변경된 버전 값을 GitHub Actions의 다음 스텝에서 사용할 수 있도록 출력합니다.
              run: | 
                  echo ${{ needs.create-log-new-version.outputs.new-version }} > VERSION
                  echo "update-version=$(cat VERSION)"  >> $GITHUB_OUTPUT
              shell: bash
    check-create-tag-update-version:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["create-tag-update-version"]
        steps: 
            - name: check tag message
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The message from tag job is: ${{ needs.create-tag-update-version.outputs.tag-exists }}"        
                echo "The update from VERSION file job is: ${{ needs.create-tag-update-version.outputs.update-version }}"        
    create-release:
        runs-on: ubuntu-latest
        needs: ["check-commit", "create-log-new-version", "create-tag-update-version"]
        if: ${{ needs.create-tag-update-version.outputs.tag-exists == 'false' }}
        permissions:
            contents: write # 릴리즈를 생성하려면 쓰기 권한이 필요합니다.
        steps:
            - uses: actions/checkout@v3
            - name: Create a GitHub release
              uses: ncipollo/release-action@v1
              with:
                  tag: ${{ needs.create-log-new-version.outputs.new-version }}
                  name: "Release ${{ needs.create-log-new-version.outputs.new-version }}"
                  body: ${{ needs.create-log-new-version.outputs.release-body }} 
                  draft: false # 초안으로 만들지 여부 (선택 사항)
                  prerelease: false # 시험판 릴리즈 여부 (선택 사항)
    auto-git-push:
        runs-on: ubuntu-latest
        needs: ["check-commit", "create-log-new-version", "create-tag-update-version"]
        if: ${{ needs.create-tag-update-version.outputs.tag-exists == 'false' }}
        permissions:
            contents: write # 릴리즈를 생성하려면 쓰기 권한이 필요합니다.
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0        
                  # `git push`를 사용하기 위해 PAT(Personal Access Token)가 필요합니다.
                  # GitHub 저장소의 Secrets에 `GH_PAT`라는 이름으로 토큰을 저장해야 합니다.
                  token: $ {{ secrets.GH_PAT }}
            - name: git push
              id: git-push
              # 이전 스텝에서 생성된 새 버전 값을 VERSION 파일에 씁니다. 
              # 변경된 버전 값을 GitHub Actions의 다음 스텝에서 사용할 수 있도록 출력합니다.
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'     
                  git add VERSION
                  git commit -m "chore: Update version to $(cat VERSION)"
                  git push 
              shell: bash      