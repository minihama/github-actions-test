name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read  # 소스코에 체크아웃 허가
  packages: write # 패키지 쓰기 권한 필요
  actions: write # 이 라인을 추가하여 workflow_dispatch 권한을 부여합니다.

jobs:
  go-test:
    name: go 버전 셋업 및 동작 테스트
    runs-on: ubuntu-latest
  #  runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    #- name: self hosted server
    #  run: |
    #    echo "Self hosted server🚀"
    #    whoami
    #    ip a
    #    ls -al

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run tests
      run: go test -v ./go/hello-world/*.go

    #- name: 변수 시크릿 테스트
    #  run: |
    #      echo "Hello World! Github Actions 🚀"
    #      echo ENV: ${{ vars.LINUX_ROOT_USER }}
    #      echo SECRET: ${{ secrets.LINUX_ROOT_PW }}
    
    #- name: executing remote ssh commands using password
    #  uses: appleboy/ssh-action@v1.2.0
    #  with:
    #    host: ${{ secrets.HOST_URL }}
    #    username: ${{ vars.HOST_ID }}
    #    password: ${{ secrets.HOST_PW }}
    #    port: ${{ secrets.HOST_PORT_21 }}
    #    script: |
    #      whoami
    #      ip a
    #      ls -al       

  docker-compose:
    name: docker-compose 빌드
    runs-on: ubuntu-latest
    needs: ["go-test"]
    steps:   
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3  # 컨테이너 레지스트리 로그인
        with:
          registry: ghcr.io                      # 컨테이너 레지스트리의 호스트명
          username: ${{ github.actor }}          # 컨테이너 레지스트리의 로그인 ID
          password: ${{ secrets.GITHUB_TOKEN }}  # 컨테이너 레지스트리의 로그인 패스워드

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5   # 컨테이너 이미지의 메타데이터 생성
        #with:   # 이미지명은 컨테이너 리지스트리의 명명 규칙을 따름
        #  images: ghcr.io/${{ github.repository }} # ghcr.io/<소유자>/<리포지토리>
        with:
          images: ghcr.io/${{ github.repository }} # 이미지 이름 지정
          tags: |
            type=sha,format=long # 커밋 SHA를 태그로 사용
            type=raw,value=latest,enable={{is_default_branch}} # 기본 브랜치에만 'latest' 태그 추가
 
        
      # Docker Compose로 이미지 빌드
      - name: Build with Docker Compose
        run: docker compose build

      # Docker Compose 메타데이터를 사용하여 태그 생성 및 푸시
      - name: Push the Docker images
        env: # GitHub Actions에서 환경변수를 Bash에서 직접 쓰려면 ${{ github.repository }} 형태로 주입
          GITHUB_REPOSITORY: ${{ github.repository }}
          PUSH_IMAGES: ${{ steps.meta.outputs.tags }}
        run: |
          echo "Start pushing Docker images"
      
          PROJECT_NAME=$(basename "$GITHUB_REPOSITORY")
          echo "PROJECT_NAME: $PROJECT_NAME"
      
          SERVICE_NAME=$(docker compose config --services)
            for svc in $services; do
              if docker compose config | sed -n "/services:/,/^[^ ]/p" | sed -n "/$svc:/,/^[^ ]/p" | grep -q 'build:'; then
                echo "$svc"
              fi
            done
          echo "SERVICE_NAME: $SERVICE_NAME"
      
          LOCAL_IMAGE_NAME="${PROJECT_NAME}_${SERVICE_NAME}"
          echo "LOCAL_IMAGE_NAME: $LOCAL_IMAGE_NAME"
      
          echo "Checking if local image exists..."
          if ! docker image inspect "$LOCAL_IMAGE_NAME" > /dev/null 2>&1; then
            echo "Error: Local image $LOCAL_IMAGE_NAME not found."
            exit 1
          fi
          echo "Local image exists."
      
          echo "Tagging image..."
          if ! docker tag "${LOCAL_IMAGE_NAME}" "${PUSH_IMAGES}"; then
            echo "Error: Failed to tag image ${LOCAL_IMAGE_NAME} as ${PUSH_IMAGES}"
            exit 1
          fi
          echo "Tagging successful."
      
          echo "Pushing image..."
          if ! docker push "${PUSH_IMAGES}"; then
            echo "Error: Failed to push image ${PUSH_IMAGES}"
            exit 1
          fi
          echo "Image push successful."

  release-tag:
    name: release-tag 설정
    runs-on: ubuntu-latest
    needs: ["docker-compose"]
    steps:   
      - name: Checkout repository
        uses: actions/checkout@v4  
    
      - name: Trigger CD workflow
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'version-update-release.yml',
              ref: 'main'
            })