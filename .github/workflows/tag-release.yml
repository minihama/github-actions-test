name: Create tag and release

on:
    push:
        branches: [ "main" ]
 
jobs:
    pre-version:   # 잡의 순차 실행을 위한 키 이름 
        runs-on: ubuntu-latest
        outputs:
            pre-version: ${{ steps.version.outputs.version }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0  # 태그를 가져오기 위해 필요
            - name: Load Version from File
              id: version  # 이 ID를 사용하여 출력 값을 참조합니다.
              uses: actions/github-script@v7  # 최신 버전으로 업데이트
              with:
                script: |
                  const fs = require('fs');
                  const versionFile = './VERSION';  // 버전 파일 경로
                  const version = fs.readFileSync(versionFile, 'utf8').trim();
                  core.setOutput('version', version);  
            
    check-pre-version:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["pre-version"]
        steps:
            - name: check loaded version
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version from pre-version job is: ${{ needs.pre-version.outputs.pre-version }}"        

    check-commit:   # 잡의 순차 실행을 위한 키 이름 
        runs-on: ubuntu-latest
        needs: ["pre-version"]
        if: ${{ needs.pre-version.outputs.pre-version != '' }}
        outputs:
            commit-message: ${{ steps.check.outputs.commit-message }}   # 출력 ID: 잡 수준(check-commit.result)의 출력값
            version: ${{ steps.get-version.outputs.version }}
        steps:
            - uses: actions/checkout@v3
            - name: Check commit message
              id: check      # 스텝 ID
              # 커밋 메시지 내용이 head_commit.message에 기입 된다.
              # 스텝 수준(check.result)의 출력값
              #run: echo "result=$(echo '${{ github.event.head_commit.message }}' | grep -oP '^Update version to v(\d|\.)+$')" >> $GITHUB_OUTPUT
              run: echo "commit-message=$(echo '${{ github.event.head_commit.message }}')" >> $GITHUB_OUTPUT
              shell: bash
            - name: Get version
              id: get-version
              #run: echo "version=$(echo '${{ github.event.head_commit.message }}' | grep -oP 'v(\d|\.)+')" >> $GITHUB_OUTPUT
              run: echo "version=$(echo '${{ needs.pre-version.outputs.pre-version }}')" >> $GITHUB_OUTPUT
              shell: bash
    check-commit-message:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["check-commit"]
        steps: 
            - name: check loaded commit message
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The commit-message from commit-message job is: ${{ needs.check-commit.outputs.commit-message }}"        
            - name: check loaded version
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version from pre-version job is: ${{ needs.check-commit.outputs.version }}"        
    create-tag:
        runs-on: ubuntu-latest
        needs: ["check-commit"]
        if: ${{ needs.check-commit.outputs.version != '' }}
        outputs:
            #tag-exists: ${{ steps.create-tag.outputs.tag_exists }}
            new-version: ${{ steps.update-version.outputs.new_version}}
            release-body: ${{ steps.generate-body.outputs.body }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Generate body
              id: generate-body
              run: |
                  EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
                  git_logs=$(git log "$(git describe --tags --abbrev=0)"..HEAD --oneline)
                  git_logs="${git_logs//$'\n'/$'\n'- }"
                  {
                      echo "body<<$EOF"
                      echo "- $git_logs"
                      echo "$EOF"
                  } >>"$GITHUB_OUTPUT"
              shell: bash
            - name: version update
              id: update-version
              run: |
                  echo "new-version=$(echo '${{ needs.check-commit.outputs.version }}' | awk -F. '{OFS="."; $3++; print}' )"  >>"$GITHUB_OUTPUT"
              shell: bash
            #- uses: rickstaa/action-create-tag@v1
            #  id: create-tag
            #  with:
            #      tag: ${{ needs.check-commit.outputs.version }}
            #      tag_exists_error: true
            #      message: ${{ needs.check-commit.outputs.version }}
    check-create-tag:    # 잡의 순차 실행을 위한 키 이름(출력 값 확인)
        runs-on: ubuntu-latest
        needs: ["create-tag"]
        steps: 
            - name: check generate-body message
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The message from generate-body job is: ${{ needs.create-tag.outputs.release-body }}"        
            - name: check version update
              run: |  # jobs.<잡_이름>.outputs.<출력_이름> 형태로 값을 참조
                echo "The version update from new version job is: ${{ needs.create-tag.outputs.new-version }}"        
