name: tag-release-version

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 워크플로우를 트리거합니다.

jobs:
  pre-version:
    runs-on: ubuntu-latest
    outputs:
      pre-version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 태그 및 전체 히스토리를 가져오기 위해 필요
      - name: Load Version from File
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const versionFile = './VERSION';
            const version = fs.readFileSync(versionFile, 'utf8').trim();
            core.setOutput('version', version);

  check-pre-version:
    runs-on: ubuntu-latest
    needs: ["pre-version"]
    steps:
      - name: check loaded version
        run: |
          echo "The version from pre-version job is: ${{ needs.pre-version.outputs.pre-version }}"

  check-commit:
    runs-on: ubuntu-latest
    needs: ["pre-version"]
    if: ${{ needs.pre-version.outputs.pre-version != '' }} 
    outputs:
      commit-message: ${{ steps.check.outputs.commit-message }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4 # 최신 버전 사용 권장
      - name: Check commit message
        id: check
        run: echo "commit-message=$(echo '${{ github.event.head_commit.message }}')" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get version
        id: get-version
        run: echo "version=$(echo '${{ needs.pre-version.outputs.pre-version }}')" >> $GITHUB_OUTPUT
        shell: bash

  check-commit-message:
    runs-on: ubuntu-latest
    needs: ["check-commit"]
    steps:
      - name: check loaded commit message
        run: |
          echo "The commit-message from commit-message job is: ${{ needs.check-commit.outputs.commit-message }}"
      - name: check loaded version
        run: |
          echo "The version from pre-version job is: ${{ needs.check-commit.outputs.version }}"

  create-log-new-version:
    runs-on: ubuntu-latest
    needs: ["check-commit"]
    if: ${{ needs.check-commit.outputs.version != '' }} 
    outputs:
      new-version: ${{ steps.update-version.outputs.new-version}}
      release-body: ${{ steps.generate-body.outputs.body }}
    steps:
      - uses: actions/checkout@v4 # 최신 버전 사용 권장
        with:
          fetch-depth: 0
      - name: Generate body
        id: generate-body
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          # git describe --tags --abbrev=0 명령어가 태그를 찾지 못할 경우를 대비하여 기본값 설정
          # 예를 들어, 첫 릴리즈 시 태그가 없을 수 있습니다.
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # 태그가 없으면 모든 커밋 로그를 가져옵니다.
            git_logs=$(git log --oneline)
          else
            # 태그가 있으면 해당 태그 이후의 커밋 로그를 가져옵니다.
            git_logs=$(git log "$LAST_TAG"..HEAD --oneline)
          fi

          git_logs="${git_logs//$'\n'/$'\n'- }"
          {
              echo "body<<$EOF"
              echo "- $git_logs"
              echo "$EOF"
          } >>"$GITHUB_OUTPUT"
        shell: bash
      - name: version update
        id: update-version
        run: |
          echo "new-version=$(echo ${{ needs.check-commit.outputs.version }} | awk -F. '{OFS="."; $3++; print}' )" >> $GITHUB_OUTPUT
        shell: bash

  check-create-log-new-version:
    runs-on: ubuntu-latest
    needs: ["create-log-new-version"]
    steps:
      - name: check generate-body message
        run: |
          echo "The message from generate-body job is: ${{ needs.create-log-new-version.outputs.release-body }}"
      - name: check version update
        run: |
          echo "The version update from new version job is: ${{ needs.create-log-new-version.outputs.new-version }}"

  create-tag-update-version:
    runs-on: ubuntu-latest
    needs: ["create-log-new-version"]
    if: ${{ needs.create-log-new-version.outputs.new-version != '' }}
    permissions:
      contents: write # 릴리즈를 생성하려면 쓰기 권한이 필요합니다.
    outputs:
      tag-exists: ${{ steps.create-tag.outputs.tag_exists }}
      update-version: ${{ steps.update-version-file.outputs.update-version }}
    steps:
      - uses: actions/checkout@v4 # 최신 버전 사용 권장
        with:
          fetch-depth: 0
      - uses: rickstaa/action-create-tag@v1
        id: create-tag
        with:
          tag: v${{ needs.create-log-new-version.outputs.new-version }} # 태그 이름에 'v' 접두사 추가 권장
          tag_exists_error: true
          message: ${{ needs.create-log-new-version.outputs.release-body }}
      - name: update version file (local only for this job)
        id: update-version-file
        run: |
          echo "${{ needs.create-log-new-version.outputs.new-version }}" > VERSION
          echo "update-version=$(cat VERSION)" >> $GITHUB_OUTPUT
        shell: bash

  check-create-tag-update-version:
    runs-on: ubuntu-latest
    needs: ["create-tag-update-version"]
    steps:
      - name: check tag message
        run: |
          echo "The message from tag job is: ${{ needs.create-tag-update-version.outputs.tag-exists }}"
          echo "The update from VERSION file job is: ${{ needs.create-tag-update-version.outputs.update-version }}"

  create-release:
    runs-on: ubuntu-latest
    needs: ["check-commit", "create-log-new-version", "create-tag-update-version"]
    if: ${{ needs.create-tag-update-version.outputs.tag-exists == 'false' }} 
    permissions:
      contents: write # 릴리즈를 생성하려면 쓰기 권한이 필요합니다.
    steps:
      - uses: actions/checkout@v4 # 최신 버전 사용 권장
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.create-log-new-version.outputs.new-version }} # 태그 이름에 'v' 접두사 추가 권장
          name: "Release v${{ needs.create-log-new-version.outputs.new-version }}"
          body: ${{ needs.create-log-new-version.outputs.release-body }}
          draft: false
          prerelease: false

  auto-git-push:
    runs-on: ubuntu-latest
    needs: ["create-log-new-version", "create-tag-update-version"]
    # 핵심 변경:
    # 2. needs.create-tag-update-version.outputs.tag-exists == 'false' 조건을 유지하여 태그가 이미 존재하면 푸시하지 않습니다.
    if: ${{  needs.create-tag-update-version.outputs.tag-exists == 'false' }}
    permissions:
      contents: write # 변경 사항을 푸시하려면 쓰기 권한이 필요합니다.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 가장 중요한 변경: GH_PAT 대신 기본 GITHUB_TOKEN을 사용합니다.
          # GITHUB_TOKEN으로 github-actions[bot]이 푸시한 내용은 새로운 워크플로우 실행을 트리거하지 않습니다.
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Git 히스토리를 가져오기 위해 필요

      - name: Update Version File, Commit, and Push
        id: git-push-version
        run: |
          NEW_VERSION="${{ needs.create-log-new-version.outputs.new-version }}"

          # VERSION 파일에 새 버전 쓰기
          echo "$NEW_VERSION" > VERSION

          # Git 사용자 설정
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # VERSION 파일을 스테이징
          git add VERSION

          # 커밋할 변경 사항이 있는지 확인
          if git diff --staged --quiet; then
              echo "No changes to VERSION file. Skipping commit and push."
          else
              # 변경 사항 커밋
              git commit -m "chore: Update version to $NEW_VERSION"
              
              # 변경 사항 푸시
              echo "Pushing updated VERSION file..."
              git push origin main # 또는 대상 브랜치 이름
              echo "VERSION file pushed successfully."
          fi
        shell: bash