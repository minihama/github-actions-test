다음은 Go 웹 애플리케이션, Nginx 리버스 프록시, Docker 및 GitHub Actions를 사용하여 CI/CD 파이프라인을 구축하는 전체 구성입니다.

## 1. 파일 구조

- `github-actions-test/`
  - `.github/workflows/ci.yml`
  - `go/hello-world/`
    - `main.go`
    - `main_test.go`
    - `go.mod`
    - `Dockerfile`
  - `docker-compose.yml`
  - `nginx.conf`

## 2. Go 웹 애플리케이션 (`go/hello-world/main.go`)

```go
package main

import (
	"fmt"
	"net/http"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, World!")
}

func main() {
	http.HandleFunc("/", helloHandler)
	fmt.Println("Server starting on port 8080...")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		fmt.Printf("Error starting server: %s\n", err)
	}
}
```

## 3. Go 테스트 코드 (`go/hello-world/main_test.go`)

```go
package main

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func Test_helloHandler(t *testing.T) {
	req, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(helloHandler)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}

	expected := `Hello, World!`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}
}
```

## 4. Go 모듈 파일 (`go/hello-world/go.mod`)

```
module github.com/minih/github-actions-test

go 1.24.5
```

## 5. Dockerfile (`go/hello-world/Dockerfile`)

```dockerfile
# Build stage
FROM golang:1.24-alpine AS builder

WORKDIR /app

# Copy go.mod
COPY go.mod ./

# Download dependencies
RUN go mod download

# Copy the entire source code
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -o /go-app .

# Final stage
FROM alpine:latest

WORKDIR /root/

# Copy the pre-built binary from the builder stage
COPY --from=builder /go-app .

EXPOSE 8080

# Command to run the executable
CMD ["./go-app"]
```

## 6. Docker Compose 파일 (`docker-compose.yml`)

```yaml
services:
  app:
    build: ./go/hello-world
    container_name: go-app

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
```

## 7. Nginx 설정 파일 (`nginx.conf`)

```nginx
events {}

http {
    server {
        listen 80;

        location / {
            proxy_pass http://app:8080;
        }
    }
}
```

## 8. GitHub Actions 워크플로우 (`.github/workflows/ci.yml`)

```yaml
name: Go CI

on:
  push:
    branches: [ "main" ]
    paths: ['go/**/*.go']
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Test
      run: go test -v ./go/hello-world/*.go

    - name: Build with Docker Compose
      run: docker compose build
```